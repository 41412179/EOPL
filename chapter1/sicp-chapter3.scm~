#lang racket
(define a (make-wire))
(define b (make-wire))
(define c (make-wire))
(define e (make-wire))

;make a half-adder
(define (half-adder a b s c)
  (let (d (make-wire) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))
(define (inverter input output)
  (define (invert-input)
    (let (new-value (logic-not (get-signal input)))
      (after-delay inverter-delay
                   (lambda()
                     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)

(define (logic-not input)
  (cond ((= input 1) 0)
        ((= input 0) 1)
        (else "input error!!")))
(define (make-agenda)
  '())
(define the-agenda (make-agenda))      
(define (probe name wire)
  (add-action! wire
               (lambda()
                 ((newline)
                 (display name)
                 (display (current-time the-agenda))
                 (display "   new-value = :")
                 (display (get-signal wire))))))



;test

(inverter c e)
(define input-1 (make-wire))
(define input-2 (make-wire))
(define sum (make-wire))
(define carry (make-wire))
(probe 'sum sum)
;sum 0 New-value = 0
(probe 'carry carry)
;carry 0 New-value = 0
